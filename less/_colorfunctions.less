/*natalya's color functions https://github.com/tallys/color-theory/blob/master/source/stylesheets/_variables.scss*/
// Check if the color is a cool color
 
//Check if you have a cool color on your hands. Cool colors will overpower warm colors when mixing.
@is-cool:1;
@is-high:1;

//@primary-color:blue;

.text-shadow-3d(@x, @y, @index) when (@index > 0) {

    // Loop-de-loop.
    .text-shadow-3d(@x, @y, @index - 1);

    // The '+' after 'text-shadow' concatenates with comma.
    text-shadow+: @x*@index @y*@index 0 black;
}
 
.is-cool-color(@color) {
  @colorhue: hue(@color);
  & when (@colorhue < 310) and (@colorhue > 140) {
    @is-cool: 5;
  }
 }  


.is-high-key-value(@color) {
  @colorhue: hue(@color);
  & when (@colorhue > 20) and (@colorhue < 190) {
    @is-high: 5;
  }
}
   


.is-highest-key-value(@color) {
  @colorhue: hue(@color);
& when (@colorhue > 30) and (@colorhue < 90) {

  @is-highest: true;
  }
}
 

 
 
//Establish a relationship (similar lighting conditions) between colors.

.harmonious-mix(@mix, @base, @x, @y) {
 
      @x(@mix);
     @y(@base);


 
    
   
    & when (@is-cool = 5) and (@is-high = 5 )
     {
      @primary-color: mix(@base, @mix, 11%);
      @complementary-color: mix(@mix, @base, 11%);
    }
    & when (@is-cool = 5) and (@is-high = 1) {
     @primary-color: mix(@base, @mix, 16%);
     @complementary-color: mix(@mix, @base, 16%);
    }
  
     & when (@is-cool = 1) and (@is-high = 5) {

      @primary-color: mix(@base, @mix, 13%);
      @complementary-color: mix(@mix, @base, 13%);
    }
  
    & when (@is-cool = 1 ) and (@is-high = 1) {
      @primary-color: mix(@mix, @base, 23%);
      @complementary-color: mix(@mix, @base, 23%);
    }
  
 

  }
      //@return mix(@mix, @base, 23%);
    
  //}
  /*
.harmonious-mix(@mix, @base) when (.is-cool-color(@mix)) {
   & when (.is-high-key-value(@base)) {
    @return mix(@mix, @base, 11%);
   }
   @return mix(@mix, @base, 23%);
} 

.harmonious-mix(@mix, @base) when !(.is-cool-color(@mix)) {
   & when (.is-high-key-value(@base)) {
    @return mix(@mix, @base, 11%);
   }
   @return mix(@mix, @base, 23%);
} 
*/
/*
.mix-neutral(@color) {
  @if (is-highest-key-value(@color)) {
    @if is-high-key-value(spin(@color, 180)) {
      @return mix(spin(@color, 180), @color, 19%);
    }
    @else {
      @return mix(spin(@color, 180), @color, 13%);
    }
  }
  @else if (is-high-key-value(@color)) {
    @if is-high-key-value(spin(@color, 180)) {
      @return mix(spin(@color, 180), @color, 31%);
    }
    @else {
      @return mix(spin(@color, 180), @color, 23%);
    }
  }
  @else {
    @if is-highest-key-value(spin(@color, 180)) {
      @return mix(spin(@color, 180), @color, 31%);
    }
    @if is-high-key-value(spin(@color, 180)) {
      @return mix(spin(@color, 180), @color, 26%);
    }
    @else {
      @return mix(spin(@color, 180), @color, 23%);
    }
  }
}
*/

.pick-contrast-of(@color) {
  @if is-high-key-value(@color){
    @if lightness(@color) < 30% {
      @return lighten(spin(@color, 180), 86);
    }
    @else if lightness(@color) > 70% {
      @return darken(spin(@color, 180), 68);
    }
    @else {
      @return darken(spin(@color, 180), 53);
    }
} @else {
  @if lightness(@color) < 30% {
      @return lighten(spin(@color, 180), 86);
    }
    @else if lightness(@color) > 70% {
      @return darken(spin(@color, 180), 68);
    }
    @else {
      @return lighten(spin(@color, 180), 53);
    }
  }
}